package lesson4.homework;

// Программа для реализации операции вставки в красно-черном дереве.
import java.util.Scanner;

class node {

    node left, right;
    int data;

    // красный ==> true, черный ==> false
    boolean color;

    node(int data) {
        this.data = data;
        left = null;
        right = null;

        // Новый узел, который создается, является всегда красного цвета.
        color = true;
    }
}

public class BinaryTree {

    private static node root = null;

    // Функция для поворота узла против часовой стрелки.
    node rotateLeft(node myNode) {
        System.out.printf("поворот влево!!\n");
        node child = myNode.right;
        node childLeft = child.left;

        child.left = myNode;
        myNode.right = childLeft;

        return child;
    }

    // Функция для поворота узла по часовой стрелке.
    node rotateRight(node myNode) {
        System.out.printf("вращение вправо\n");
        node child = myNode.left;
        node childRight = child.right;

        child.right = myNode;
        myNode.left = childRight;

        return child;
    }

    // Функция для проверки того, является ли узел красного цвета или нет.
    boolean isRed(node myNode) {
        if (myNode == null) {
            return false;
        }
        return (myNode.color == true);
    }

    // Функция для изменения цвета двух узлы.
    void swapColors(node node1, node node2) {
        boolean temp = node1.color;
        node1.color = node2.color;
        node2.color = temp;

    }

    void recolor(node node){
        if (node == null)
            return;
        if (isRed(node)) {
            if (node.left != null)
                node.left.color = false;
            if (node.right != null)
                node.right.color = false;
        }else{
            if (node.left != null)
                node.left.color = true;
        }
        recolor(node.left);
        recolor(node.right);
    }

    // вставка в левостороннее Красно-черное дерево.
    node insert(node myNode, int data) {
        // Обычный код вставки для любого двоичного файла
        if (myNode == null) {
            node node = new node(data);
            node.color = false;
            return node;
        }

        if (data < myNode.data) {
            myNode.left = insert(myNode.left, data);
        } else if (data > myNode.data) {
            myNode.right = insert(myNode.right, data);
        } else {
            return myNode;
        }

        // случай 1.
        // когда правый дочерний элемент красный, а левый дочерний элемент черный или не
        // существует.
        if (isRed(myNode.right) && !isRed(myNode.left)) {
            // Повернуть узел влево
            myNode = rotateLeft(myNode);
        }

        // случай 2
        // когда левый ребенок, а также левый внук выделены красным цветом
        if (isRed(myNode.left) && isRed(myNode.left.left)) {
            // Повернуть узел в право
            myNode = rotateRight(myNode);
        }

        // перекраска
        recolor(root);

        return myNode;
    }

    // Обход по порядку
    void inorder(node node, node parent) {
        if (node != null) {
            inorder(node.left, node);
            String c = "_R";
            if (node.color == false)
                c = "_B";
            if (parent != null)
                System.out.print(parent.data + " -> " + node.data + "" + c + " ");
            else
                System.out.print(node.data + "" + c + " ");

            inorder(node.right, node);
        }
    }

    public static void main(String[] args) {

        BinaryTree node = new BinaryTree();
        Scanner scan = new Scanner(System.in);

        char ch;
        do {
            System.out.println("Введите целое число");

            int num = scan.nextInt();
            root = node.insert(root, num);

            System.out.println("root = "+node.root.data);

            node.inorder(root, null);
            System.out.println("\nВы хотите продолжить? (введите y или n)");
            ch = scan.next().charAt(0);
        } while (ch == 'Y' || ch == 'y');
    }
}
